name: 'Apple action - Prepare certificate'
description: 'Create if does not exist and download certificate'
inputs:
  app-store-connect-issuer-id:
    description: 'Issuer ID of App Store Connect API Key'
    required: true
  app-store-connect-key-id:
    description: 'Key ID of App Store Connect API Key'
    required: true
  app-store-connect-private-key:
    description: 'Private Key (Base64) of App Store Connect API Key'
    required: true
  certificate-distribution-private-key:
    description: 'Private Key (Base64) for Certificate Signing Request'
    required: false
  certificate-distribution-private-key-password:
    description: 'Password of Private Key for Certificate Signing Request'
    required: false
  certificate-development-private-key:
    description: 'Private Key (Base64) for Certificate Signing Request'
    required: false
  certificate-development-private-key-password:
    description: 'Password of Private Key for Certificate Signing Request'
    required: false
runs:
  using: 'composite'
  steps:
    - name: Prepare python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Prepare environment
      id: prepare-environment
      run: |
        BUFFER_DIRECTORY="$(mktemp -d -t AB180_APPLE_ACTION_SCRIPT_CERTIFICATE)"
        PYTHON_ENVIRONMENT_DIRECTORY="$BUFFER_DIRECTORY/.python-environment"
        PYTHON_BINARY_DIRECTORY="$PYTHON_ENVIRONMENT_DIRECTORY/bin"
        CREDENTIAL_DIRECTORY="$BUFFER_DIRECTORY/.credential"

        mkdir -p "$PYTHON_ENVIRONMENT_DIRECTORY"
        python3 -m venv "$PYTHON_ENVIRONMENT_DIRECTORY"
        source "$PYTHON_ENVIRONMENT_DIRECTORY/bin/activate"
        python3 -m pip install codemagic-cli-tools
        deactivate
        mkdir -p "$CREDENTIAL_DIRECTORY"

        echo "::add-mask::$BUFFER_DIRECTORY"
        echo "buffer-path=$BUFFER_DIRECTORY" >> $GITHUB_OUTPUT
        echo "python-path=$PYTHON_BINARY_DIRECTORY" >> $GITHUB_OUTPUT
        echo "credential-path=$CREDENTIAL_DIRECTORY" >> $GITHUB_OUTPUT
      shell: bash

    - name: Prepare certificate
      run: |
        PYTHON_PATH='${{ steps.prepare-environment.outputs.python-path }}'
        CREDENTIAL_PATH='${{ steps.prepare-environment.outputs.credential-path }}'
        APP_STORE_CONNECT_PRIVATE_KEY_FILE="$CREDENTIAL_PATH/app_store_connect_private_key.p8"
        CERTIFICATE_PRIVATE_KEY_FILE="$CREDENTIAL_PATH/certificate_private_key.p8"

        function keychain {
          "$PYTHON_PATH/keychain" "$@"
        }
        function app_store_connect {
          "$PYTHON_PATH/app-store-connect" "$@" \
            --issuer-id '${{ inputs.app-store-connect-issuer-id }}' \
            --key-id '${{ inputs.app-store-connect-key-id }}' \
            --api-unauthorized-retries 100 \
            --disable-jwt-cache \
            --log-stream stdout
        }

        if [[ ${{
          inputs.certificate-distribution-private-key != null
          && inputs.certificate-distribution-private-key-password != null
        }} == true ]]; then
          echo '${{ inputs.app-store-connect-private-key }}' \
            | base64 --decode \
            > "$APP_STORE_CONNECT_PRIVATE_KEY_FILE"
          echo '${{ inputs.certificate-distribution-private-key }}' \
            | base64 --decode \
            > "$CERTIFICATE_PRIVATE_KEY_FILE"
          function app_store_connect_distribution {
            app_store_connect "$@" \
              --type DISTRIBUTION \
              --private-key "@file:$APP_STORE_CONNECT_PRIVATE_KEY_FILE" \
              --certificate-key "@file:$CERTIFICATE_PRIVATE_KEY_FILE" \
              --certificate-key-password '${{ inputs.certificate-distribution-private-key-password }}'
          }

          app_store_connect_distribution certificates list --save --certificates-dir "$CREDENTIAL_PATH" \
            | grep 'Saved Signing Certificate' \
            || app_store_connect_distribution certificates create --save --certificates-dir "$CREDENTIAL_PATH"
        fi

        if [[ ${{
          inputs.certificate-development-private-key != null
          && inputs.certificate-development-private-key-password != null
        }} == true ]]; then
          echo '${{ inputs.app-store-connect-private-key }}' \
            | base64 --decode \
            > "$APP_STORE_CONNECT_PRIVATE_KEY_FILE"
          echo '${{ inputs.certificate-development-private-key }}' \
            | base64 --decode \
            > "$CERTIFICATE_PRIVATE_KEY_FILE"
          function app_store_connect_development {
            app_store_connect "$@" \
              --type DEVELOPMENT \
              --private-key "@file:$APP_STORE_CONNECT_PRIVATE_KEY_FILE" \
              --certificate-key "@file:$CERTIFICATE_PRIVATE_KEY_FILE" \
              --certificate-key-password '${{ inputs.certificate-development-private-key-password }}'
          }

          app_store_connect_development certificates list --save --certificates-dir "$CREDENTIAL_PATH" \
            | grep 'Saved Signing Certificate' \
            || app_store_connect_development certificates create --save --certificates-dir "$CREDENTIAL_PATH"
        fi

        keychain create \
          --path "$CREDENTIAL_PATH/certificate.keychain-db"
        keychain add-certificates \
          --path "$CREDENTIAL_PATH/certificate.keychain-db" \
          --allow-app xcodebuild codesign productsign \
          --certificate "$CREDENTIAL_PATH/*.p12"

      shell: bash

    - name: Clean environment
      if: always() && steps.prepare-environment.outcome == 'success'
      uses: ab180/apple-action/.github/action/post-step@v3
      with:
        script: |
          PYTHON_PATH='${{ steps.prepare-environment.outputs.python-path }}'
          CREDENTIAL_PATH='${{ steps.prepare-environment.outputs.credential-path }}'
          BUFFER_PATH='${{ steps.prepare-environment.outputs.buffer-path }}'

          function keychain {
            "$PYTHON_PATH/keychain" "$@"
          }

          keychain delete \
            --path "$CREDENTIAL_PATH/certificate.keychain-db"
          rm -rf "$BUFFER_PATH"
